plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = 'https://maven.maxhenkel.de/repository/public' }
	maven { url = 'https://api.modrinth.com/maven' }
	maven { url = "https://maven.ladysnake.org/releases" }
    mavenCentral()
}

// For some REALLY DUMB reason, simple-openai packs sfl4j-simple
configurations.all {
	exclude group: 'org.slf4j', module: 'slf4j-simple'
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "de.maxhenkel.voicechat:voicechat-api:2.3.3"
	modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-1.21.4-2.5.26"

	modImplementation include("org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}");
	modImplementation include("org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}");

	implementation include("com.aallam.openai:openai-client:3.8.2")
//	implementation "io.ktor:ktor-client-okhttp-jvm:2.3.12"
	implementation include("io.ktor:ktor-client-java:2.3.12")


	implementation include("org.antlr:ST4:4.3.4")
	include("org.antlr:antlr-runtime:3.5.3");

	// Include transitive dependencies
	include("com.aallam.openai:openai-client:3.8.2")
	include("com.aallam.openai:openai-client-jvm:3.8.2")
	include("com.aallam.openai:openai-core:3.8.2")
	include("com.aallam.openai:openai-core-jvm:3.8.2")

	include("com.squareup.okio:okio:3.4.0")
	include("com.squareup.okio:okio-jvm:3.4.0")
	include("io.ktor:ktor-client-core:2.3.12")
	include("io.ktor:ktor-client-core-jvm:2.3.12")
	include("io.ktor:ktor-http:2.3.12")
	include("io.ktor:ktor-http-jvm:2.3.12")
	include("io.ktor:ktor-utils:2.3.12")
	include("io.ktor:ktor-utils-jvm:2.3.12")
	include("io.ktor:ktor-io:2.3.12")
	include("io.ktor:ktor-io-jvm:2.3.12")

	include("io.ktor:ktor-events:2.3.12")
	include("io.ktor:ktor-events-jvm:2.3.12")

	include("io.ktor:ktor-websocket-serialization:2.3.12")
	include("io.ktor:ktor-websocket-serialization-jvm:2.3.12")
	include("io.ktor:ktor-serialization:2.3.12")
	include("io.ktor:ktor-serialization-jvm:2.3.12")
	include("io.ktor:ktor-websockets:2.3.12")
	include("io.ktor:ktor-websockets-jvm:2.3.12")

	include("io.ktor:ktor-client-logging:2.3.12")
	include("io.ktor:ktor-client-logging-jvm:2.3.12")
	include("io.ktor:ktor-client-auth:2.3.12")
	include("io.ktor:ktor-client-auth-jvm:2.3.12")
	include("io.ktor:ktor-client-content-negotiation:2.3.12")
	include("io.ktor:ktor-client-content-negotiation-jvm:2.3.12")

	include("io.ktor:ktor-serialization-kotlinx-json:2.3.2")
	include("io.ktor:ktor-serialization-kotlinx-json-jvm:2.3.2")
	include("io.ktor:ktor-serialization-kotlinx:2.3.12")
	include("io.ktor:ktor-serialization-kotlinx-jvm:2.3.2")

	include("io.ktor:ktor-client-java:2.3.12")
	include("io.ktor:ktor-client-java-jvm:2.3.12")


	implementation include(project(':playht-api'))

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
kotlin {
    jvmToolchain(21)
}